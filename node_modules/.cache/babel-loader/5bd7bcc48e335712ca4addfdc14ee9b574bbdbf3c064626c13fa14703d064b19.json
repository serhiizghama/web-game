{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./CombatPage.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const MAX_ROUND=5;const ROUND_TIME=5;const CombatPage=_ref=>{let{onChangePage}=_ref;const[selectedCards,setSelectedCards]=useState([]);const[opponentCards,setOpponentCards]=useState([]);const[currentRound,setCurrentRound]=useState(0);const[showCards,setShowCards]=useState(true);const[timer,setTimer]=useState(ROUND_TIME);const[gameResult,setGameResult]=useState(null);const[playerScore,setPlayerScore]=useState(0);const[opponentScore,setOpponentScore]=useState(0);const handleCardSelect=color=>{if(selectedCards.length<10){setSelectedCards(prevCards=>[...prevCards,color]);setShowCards(false);}};const handleOpponentCardSelect=()=>{const colors=[\"red\",\"blue\"];const randomColor=colors[Math.floor(Math.random()*colors.length)];setOpponentCards(prevCards=>[...prevCards,randomColor]);};const calculateScores=(playerCard,opponentCard)=>{if(playerCard===\"red\"&&opponentCard===\"red\"){setPlayerScore(prevScore=>prevScore-2);setOpponentScore(prevScore=>prevScore-2);}else if(playerCard===\"blue\"&&opponentCard===\"blue\"){setPlayerScore(prevScore=>prevScore+3);setOpponentScore(prevScore=>prevScore+3);}else if(playerCard===\"red\"&&opponentCard===\"blue\"){setOpponentScore(prevScore=>prevScore-2);setPlayerScore(prevScore=>prevScore+5);}else if(playerCard===\"blue\"&&opponentCard===\"red\"){setOpponentScore(prevScore=>prevScore+5);setPlayerScore(prevScore=>prevScore-2);}};useEffect(()=>{if(!!opponentCards[0]&&selectedCards.length===opponentCards.length){calculateScores(selectedCards[selectedCards.length-1],opponentCards[opponentCards.length-1]);}},[selectedCards,opponentCards]);useEffect(()=>{if(currentRound<MAX_ROUND&&timer>0){const interval=setInterval(()=>{setTimer(prevTimer=>prevTimer-1);},1000);return()=>clearInterval(interval);}else if(timer===0){if(showCards){handleCardSelect(\"blue\");handleOpponentCardSelect();}setShowCards(false);if(currentRound===MAX_ROUND-1){// Если это последний раунд\nconst result=playerScore>opponentScore?\"WIN\":playerScore<opponentScore?\"LOSE\":\"DRAW\";setGameResult(result);}else{setCurrentRound(prevRound=>prevRound+1);setShowCards(true);setTimer(ROUND_TIME);}if(selectedCards.length>opponentCards.length){handleOpponentCardSelect();}}},[currentRound,timer,showCards]);useEffect(()=>{if(gameResult){setTimeout(()=>{onChangePage();},3000);}},[onChangePage,gameResult]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"combat-page\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"timer-section\",children:gameResult?/*#__PURE__*/_jsx(\"h2\",{className:\"result\",children:gameResult}):/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-fill\",style:{width:`${timer/ROUND_TIME*100}%`}})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"selected-cards-section\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"selected-cards-score\",children:opponentScore}),/*#__PURE__*/_jsx(\"h3\",{className:\"selected-cards-title\",children:\"OPPONENT\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"selected-cards-table\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"selected-cards-container\",children:opponentCards.map((color,index)=>/*#__PURE__*/_jsx(\"div\",{className:`selected-card card-${color}`},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"divider\"}),/*#__PURE__*/_jsx(\"div\",{className:\"selected-cards-container\",children:selectedCards.map((color,index)=>/*#__PURE__*/_jsx(\"div\",{className:`selected-card card-${color}`},index))})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"selected-cards-title\",children:\"YOU\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"selected-cards-score\",children:playerScore})]}),/*#__PURE__*/_jsx(\"div\",{className:\"card-selection-section\",children:!gameResult&&showCards&&currentRound<=MAX_ROUND?/*#__PURE__*/_jsxs(\"div\",{className:\"cards-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card card-red\",onClick:()=>handleCardSelect(\"red\"),children:\"\\u2716\"}),/*#__PURE__*/_jsx(\"div\",{className:\"card card-blue\",onClick:()=>handleCardSelect(\"blue\"),children:\"\\u271A\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"loader\"})})]})});};export default CombatPage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MAX_ROUND","ROUND_TIME","CombatPage","_ref","onChangePage","selectedCards","setSelectedCards","opponentCards","setOpponentCards","currentRound","setCurrentRound","showCards","setShowCards","timer","setTimer","gameResult","setGameResult","playerScore","setPlayerScore","opponentScore","setOpponentScore","handleCardSelect","color","length","prevCards","handleOpponentCardSelect","colors","randomColor","Math","floor","random","calculateScores","playerCard","opponentCard","prevScore","interval","setInterval","prevTimer","clearInterval","result","prevRound","setTimeout","children","className","style","width","map","index","onClick"],"sources":["/Users/serhiizghama/Documents/work/game/web-game/src/pages/CombatPage/CombatPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./CombatPage.css\";\n\nconst MAX_ROUND = 5;\nconst ROUND_TIME = 5;\n\nconst CombatPage: React.FC<{ onChangePage: () => void }> = ({\n  onChangePage,\n}) => {\n  const [selectedCards, setSelectedCards] = useState<string[]>([]);\n  const [opponentCards, setOpponentCards] = useState<string[]>([]);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [showCards, setShowCards] = useState(true);\n  const [timer, setTimer] = useState(ROUND_TIME);\n  const [gameResult, setGameResult] = useState<string | null>(null);\n\n  const [playerScore, setPlayerScore] = useState(0);\n  const [opponentScore, setOpponentScore] = useState(0);\n\n  const handleCardSelect = (color: string) => {\n    if (selectedCards.length < 10) {\n      setSelectedCards((prevCards) => [...prevCards, color]);\n      setShowCards(false);\n    }\n  };\n\n  const handleOpponentCardSelect = () => {\n    const colors = [\"red\", \"blue\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n    setOpponentCards((prevCards) => [...prevCards, randomColor]);\n  };\n\n  const calculateScores = (playerCard: string, opponentCard: string) => {\n    if (playerCard === \"red\" && opponentCard === \"red\") {\n      setPlayerScore((prevScore) => prevScore - 2);\n      setOpponentScore((prevScore) => prevScore - 2);\n    } else if (playerCard === \"blue\" && opponentCard === \"blue\") {\n      setPlayerScore((prevScore) => prevScore + 3);\n      setOpponentScore((prevScore) => prevScore + 3);\n    } else if (playerCard === \"red\" && opponentCard === \"blue\") {\n      setOpponentScore((prevScore) => prevScore - 2);\n      setPlayerScore((prevScore) => prevScore + 5);\n    } else if (playerCard === \"blue\" && opponentCard === \"red\") {\n      setOpponentScore((prevScore) => prevScore + 5);\n      setPlayerScore((prevScore) => prevScore - 2);\n    }\n  };\n\n  useEffect(() => {\n    if (!!opponentCards[0] && selectedCards.length === opponentCards.length) {\n      calculateScores(\n        selectedCards[selectedCards.length - 1],\n        opponentCards[opponentCards.length - 1]\n      );\n    }\n  }, [selectedCards, opponentCards]);\n\n  useEffect(() => {\n    if (currentRound < MAX_ROUND && timer > 0) {\n      const interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer - 1);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    } else if (timer === 0) {\n      if (showCards) {\n        handleCardSelect(\"blue\");\n        handleOpponentCardSelect();\n      }\n      setShowCards(false);\n\n      if (currentRound === MAX_ROUND - 1) {\n        // Если это последний раунд\n        const result =\n          playerScore > opponentScore\n            ? \"WIN\"\n            : playerScore < opponentScore\n            ? \"LOSE\"\n            : \"DRAW\";\n        setGameResult(result);\n      } else {\n        setCurrentRound((prevRound) => prevRound + 1);\n        setShowCards(true);\n\n        setTimer(ROUND_TIME);\n      }\n      if (selectedCards.length > opponentCards.length) {\n        handleOpponentCardSelect();\n      }\n    }\n  }, [currentRound, timer, showCards]);\n\n  useEffect(() => {\n    if (gameResult) {\n      setTimeout(() => {\n        onChangePage();\n      }, 3000);\n    }\n  }, [onChangePage, gameResult]);\n\n  return (\n    <>\n      <div className=\"combat-page\">\n        <div className=\"timer-section\">\n          {gameResult ? (\n            <h2 className=\"result\">{gameResult}</h2>\n          ) : (\n            <div className=\"progress-bar\">\n              <div\n                className=\"progress-bar-fill\"\n                style={{ width: `${(timer / ROUND_TIME) * 100}%` }}\n              ></div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"selected-cards-section\">\n          <h2 className=\"selected-cards-score\">{opponentScore}</h2>\n          <h3 className=\"selected-cards-title\">OPPONENT</h3>\n          <div className=\"selected-cards-table\">\n            <div className=\"selected-cards-container\">\n              {opponentCards.map((color, index) => (\n                <div\n                  key={index}\n                  className={`selected-card card-${color}`}\n                ></div>\n              ))}\n            </div>\n            <div className=\"divider\"></div>\n            <div className=\"selected-cards-container\">\n              {selectedCards.map((color, index) => (\n                <div\n                  key={index}\n                  className={`selected-card card-${color}`}\n                ></div>\n              ))}\n            </div>\n          </div>\n          <h3 className=\"selected-cards-title\">YOU</h3>\n          <h2 className=\"selected-cards-score\">{playerScore}</h2>\n        </div>\n\n        <div className=\"card-selection-section\">\n          {!gameResult && showCards && currentRound <= MAX_ROUND ? (\n            <div className=\"cards-container\">\n              <div\n                className=\"card card-red\"\n                onClick={() => handleCardSelect(\"red\")}\n              >\n                ✖\n              </div>\n              <div\n                className=\"card card-blue\"\n                onClick={() => handleCardSelect(\"blue\")}\n              >\n                ✚\n              </div>\n            </div>\n          ) : (\n            <div className=\"loader\"></div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CombatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}